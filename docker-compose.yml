services:
  app:
    build:
      context: .
      dockerfile: Dockerfile
      target: service
    container_name: app-l0
    restart: always
    depends_on:
      - postgres
      - broker
    ports:
      - "${HTTP_SERVER_PORT}:8080"
    environment:
      - DATABASE_HOST=postgres
      - DATABASE_PORT=5432
      - DATABASE_USER=${POSTGRES_USER}
      - DATABASE_PASSWORD=${POSTGRES_PASSWORD}
      - DATABASE_DBNAME=${POSTGRES_DB}
      - KAFKA_BOOTSTRAP_SERVERS=broker:29092
    volumes:
      - ./config.yaml:/app/config.yaml # Config for the consumer service
    networks:
      - l0-network

  producer:
    build:
      context: .
      dockerfile: Dockerfile
      target: producer
    container_name: producer-l0
    depends_on:
      - broker
    environment:
      - KAFKA_BROKERS=broker:29092
    volumes:
      - ./mock.json:/app/mock.json
    command: ["./producer", "--file", "/app/mock.json", "--rps", "1"] # You can change flags here
    networks:
      - l0-network

  postgres:
    image: postgres:17-alpine
    container_name: database-l0
    restart: always
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    ports:
      - "${POSTGRES_PORT}:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - l0-network

  zookeeper:
    image: confluentinc/cp-zookeeper:7.3.0
    container_name: zookeeper-l0
    environment:
      ZOOKEEPER_CLIENT_PORT: ${ZOOKEEPER_CLIENT_PORT}
      ZOOKEEPER_TICK_TIME: ${ZOOKEEPER_TICK_TIME}
    networks:
    - l0-network

  broker:
    image: confluentinc/cp-kafka:7.3.0
    container_name: broker-l0
    ports:
      - "${KAFKA_PORT}:9092"
    depends_on:
      - zookeeper
    environment:
      KAFKA_BROKER_ID: ${KAFKA_BROKER_ID}
      KAFKA_ZOOKEEPER_CONNECT: ${KAFKA_ZOOKEEPER_CONNECT}
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: ${KAFKA_LISTENER_SECURITY_PROTOCOL_MAP}
      KAFKA_ADVERTISED_LISTENERS: ${KAFKA_ADVERTISED_LISTENERS}
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: ${KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR}
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: ${KAFKA_TRANSACTION_STATE_LOG_MIN_ISR}
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: ${KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR}
    networks:
      - l0-network

  prometheus:
    image: prom/prometheus:main
    container_name: prometheus-l0
    restart: always
    ports:
      - "${PROMETHEUS_PORT}:9090"
    volumes:
      - ./configs/prometheus:/etc/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
    networks:
      - l0-network

  grafana:
    image: grafana/grafana:main-ubuntu
    container_name: grafana-l0
    restart: always
    ports:
      - "${GRAFANA_PORT}:3000"
    volumes:
      - ./configs/grafana/provisioning:/etc/grafana/provisioning
    networks:
      - l0-network

  node-exporter:
    image: prom/node-exporter:latest
    container_name: node-exporter-l0
    restart: always
    ports:
      - "${NODE_EXPORTER_PORT}:9100"
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    command:
      - '--path.procfs=/host/proc'
      - '--path.sysfs=/host/sys'
      - '--path.rootfs=/rootfs'
      - '--collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc)($$|/)'
    networks:
      - l0-network

volumes:
  postgres_data:

networks:
  l0-network:
    driver: bridge
